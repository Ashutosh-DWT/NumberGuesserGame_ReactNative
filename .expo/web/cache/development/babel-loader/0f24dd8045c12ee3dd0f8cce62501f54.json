{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this;\n\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport React, { useState, useEffect } from \"react\";\nimport Title from \"../components/ui/Title\";\nimport NumberContainer from \"../components/game/NumberContainer\";\nimport PrimaryButton from \"../components/ui/PrimaryButton\";\nimport Card from \"../components/ui/Card\";\nimport InstructionsText from \"../components/ui/InstructionsText\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction generateRandomBetween(min, max, exclude) {\n  var rndNum = Math.floor(Math.random() * (max - min)) + min;\n\n  if (rndNum === exclude) {\n    return generateRandomBetween(min, max, exclude);\n  } else {\n    return rndNum;\n  }\n}\n\nvar minBoundary = 1;\nvar maxBoundary = 100;\n\nvar GameScreen = function GameScreen(_ref) {\n  var userNumber = _ref.userNumber,\n      onGameOver = _ref.onGameOver;\n  var initialGuess = generateRandomBetween(1, 100, userNumber);\n\n  var _useState = useState(initialGuess),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentGuess = _useState2[0],\n      setCurrentGuess = _useState2[1];\n\n  useEffect(function () {\n    if (currentGuess === userNumber) {\n      onGameOver();\n    }\n  }, [currentGuess, userNumber, onGameOver]);\n\n  function nextGuessHandler(direction) {\n    if (direction === \"lower\" && currentGuess < userNumber || direction === \"greater\" && currentGuess > userNumber) {\n      Alert.alert(\"Dont lie!\", \"You know that this is wrong...\", [{\n        text: \"sorry\",\n        style: \"cancel\"\n      }]);\n      return;\n    }\n\n    if (direction === \"lower\") {\n      maxBoundary = currentGuess - 1;\n    } else {\n      minBoundary = currentGuess + 1;\n    }\n\n    var newRndNumber = generateRandomBetween(minBoundary, maxBoundary, currentGuess);\n    setCurrentGuess(newRndNumber);\n  }\n\n  return _jsxs(View, {\n    style: styles.screen,\n    children: [_jsx(Title, {\n      children: \"Opponent's Guess\"\n    }), _jsx(NumberContainer, {\n      children: currentGuess\n    }), _jsxs(Card, {\n      children: [_jsx(InstructionsText, {\n        children: \"Higher or Lower?\"\n      }), _jsxs(View, {\n        children: [_jsx(PrimaryButton, {\n          onPress: nextGuessHandler.bind(_this, \"lower\"),\n          children: \"-\"\n        }), _jsx(PrimaryButton, {\n          onPress: nextGuessHandler.bind(_this, \"greater\"),\n          children: \"+\"\n        })]\n      })]\n    })]\n  });\n};\n\nexport default GameScreen;\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    padding: 24\n  }\n});","map":{"version":3,"sources":["/home/ashutosh/Documents/starting-project/starting-project/screens/GameScreen.js"],"names":["React","useState","useEffect","Title","NumberContainer","PrimaryButton","Card","InstructionsText","generateRandomBetween","min","max","exclude","rndNum","Math","floor","random","minBoundary","maxBoundary","GameScreen","userNumber","onGameOver","initialGuess","currentGuess","setCurrentGuess","nextGuessHandler","direction","Alert","alert","text","style","newRndNumber","styles","screen","bind","StyleSheet","create","flex","padding"],"mappings":"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","sourcesContent":["import { View, Text, StyleSheet, Alert } from \"react-native\";\nimport React, { useState, useEffect } from \"react\";\nimport Title from \"../components/ui/Title\";\nimport NumberContainer from \"../components/game/NumberContainer\";\nimport PrimaryButton from \"../components/ui/PrimaryButton\";\nimport Card from \"../components/ui/Card\";\nimport InstructionsText from \"../components/ui/InstructionsText\";\n\nfunction generateRandomBetween(min, max, exclude) {\n  const rndNum = Math.floor(Math.random() * (max - min)) + min;\n\n  if (rndNum === exclude) {\n    return generateRandomBetween(min, max, exclude);\n  } else {\n    return rndNum;\n  }\n}\n\nlet minBoundary = 1;\nlet maxBoundary = 100;\n\nconst GameScreen = ({ userNumber, onGameOver }) => {\n  const initialGuess = generateRandomBetween(1, 100, userNumber);\n  const [currentGuess, setCurrentGuess] = useState(initialGuess);\n\n  useEffect(() => {\n    if (currentGuess === userNumber) {\n      onGameOver();\n    }\n  }, [currentGuess, userNumber, onGameOver]);\n\n  function nextGuessHandler(direction) {\n    if (\n      (direction === \"lower\" && currentGuess < userNumber) ||\n      (direction === \"greater\" && currentGuess > userNumber)\n    ) {\n      Alert.alert(\"Dont lie!\", \"You know that this is wrong...\", [\n        {\n          text: \"sorry\",\n          style: \"cancel\",\n        },\n      ]);\n      return;\n    }\n\n    if (direction === \"lower\") {\n      maxBoundary = currentGuess - 1;\n    } else {\n      minBoundary = currentGuess + 1;\n    }\n    const newRndNumber = generateRandomBetween(\n      minBoundary,\n      maxBoundary,\n      currentGuess\n    );\n    setCurrentGuess(newRndNumber);\n  }\n\n  return (\n    <View style={styles.screen}>\n      <Title>Opponent's Guess</Title>\n      <NumberContainer>{currentGuess}</NumberContainer>\n      <Card>\n        <InstructionsText>Higher or Lower?</InstructionsText>\n        <View>\n          <PrimaryButton onPress={nextGuessHandler.bind(this, \"lower\")}>\n            -\n          </PrimaryButton>\n          <PrimaryButton onPress={nextGuessHandler.bind(this, \"greater\")}>\n            +\n          </PrimaryButton>\n        </View>\n      </Card>\n      {/* <View>Log Rounds</View> */}\n    </View>\n  );\n};\n\nexport default GameScreen;\n\nconst styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    padding: 24,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}